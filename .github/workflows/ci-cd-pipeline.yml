# .github/workflows/ci-cd-pipeline.yml
name: CI/CD - Cinema Challenge Tests

on:
  push:
    branches:
      - develop

permissions:
  contents: write
  pull-requests: write

jobs:
  test-and-manage-pr:
    name: Test, Update README and Merge
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-22.04
    env:
      MONGO_URI: ${{ secrets.MONGO_URI }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      GH_TOKEN: ${{ secrets.PAT }}

    steps:
      # 1) Checkout completo com seu PAT
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}

      # 2) Setup Python
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 3) Instala depend√™ncias
      - name: Install Python dependencies
        run: |
          pip install -r cinema-automation/requirements.txt
          pip install pytz

      # 4) Playwright
      - name: Install Playwright system dependencies
        run: python -m playwright install-deps

      - name: Install Playwright browsers
        run: python -m playwright install

      # 5) Executa testes Robot (gera logs mesmo em falha)
      - name: Run Robot Framework tests
        working-directory: ./cinema-automation
        run: robot --outputdir logs tests/
        continue-on-error: true

      # 6) Atualiza o README.md
      - name: Update README.md with test results
        run: python update_readme.py

      # 7) Comita e empurra o README.md de volta √† develop (skip ci)
      - name: Commit & Push README.md
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md
          if ! git diff --cached --quiet; then
            git commit -m "docs: ü§ñ Atualiza README e testes [skip ci]"
            git push origin develop
          else
            echo "‚úÖ No changes to README.md"
          fi

      # 8) Upload dos logs como artefato
      - name: Upload Robot logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: robot-logs
          path: cinema-automation/logs/

      # 9) Abort se algum teste falhou (n√£o cria PR)
      - name: Abort if tests failed
        run: |
          if grep -q 'status="FAIL"' cinema-automation/logs/output.xml; then
            echo "‚ùå Testes falharam. Pipeline encerrado sem PR."
            exit 1
          fi

      # 10) Cria e faz merge do PR de develop ‚Üí main via GH CLI
      - name: Create & Merge PR via GH CLI
        shell: bash
        run: |
          # Cria PR se ainda n√£o existir
          if ! gh pr list --state open --base main --head develop | grep -q develop; then
            gh pr create \
              --title "Merge Autom√°tico: develop ‚û°Ô∏è main" \
              --body "‚úÖ Testes passaram e README atualizado. Merge autom√°tico." \
              --base main --head develop \
              --label automerge
          fi

          # Captura o n√∫mero do PR e faz squash merge
          PR_NUM=$(gh pr list --state open --base main --head develop --json number -q '.[0].number')
          gh pr merge "$PR_NUM" --squash --delete-branch --confirm
