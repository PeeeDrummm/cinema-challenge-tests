name: CI/CD Pipeline

on:
  push:
    branches:
      - develop

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    env:
      MONGO_URI: ${{ secrets.MONGO_URI }}

    steps:
      # 1) Faz checkout completo usando seu PAT para permitir pushes
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}

      # 2) Python 3.11
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3) Dependências Robot + Browser
      - name: 📦 Instala Dependências
        run: |
          pip install -r cinema-automation/requirements.txt
          pip install robotframework robotframework-browser
          rfbrowser init

      # 4) Executa os testes (sempre gera output.xml mesmo se falhar)
      - name: 🧪 Run Robot Tests
        run: |
          mkdir -p cinema-automation/logs
          robot \
            --output cinema-automation/logs/output.xml \
            --log cinema-automation/logs/log.html \
            --report cinema-automation/logs/report.html \
            cinema-automation/tests || true
        continue-on-error: true

      # 5) Atualiza o README com o resultado dos testes
      - name: 🧠 Update README.md
        run: python update_readme.py

      # 6) Comita e empurra o README atualizado em develop (skip ci)
      - name: 📝 Commit & Push README
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md
          if ! git diff --cached --quiet; then
            git commit -m "docs: 🤖 Atualiza README e testes [skip ci]"
            git push origin develop
          else
            echo "✅ Nenhuma mudança no README"
          fi

      # 7) Salva os logs como artefato
      - name: 💾 Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: robot-logs
          path: cinema-automation/logs/

      # 8) Cancela se algum teste falhou
      - name: 🚨 Abort if Tests Failed
        run: |
          if grep -q 'status="FAIL"' cinema-automation/logs/output.xml; then
            echo "❌ Testes falharam. Interrompendo pipeline."
            exit 1
          fi

      # 9) Cria e faz merge do PR diretamente com o GH CLI
      - name: 🤖 Create & Merge PR
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          # Autentica o gh CLI
          echo "${GH_TOKEN}" | gh auth login --with-token
          # Se ainda não existe PR aberta de develop→main, crie uma
          if ! gh pr list --state open --base main --head develop | grep -q develop; then
            gh pr create \
              --title "Merge Automático: develop ➡️ main" \
              --body "Este PR foi criado automaticamente após os testes passarem com sucesso." \
              --base main --head develop \
              --label automerge
          fi
          # Agora auto-merge com squash e delete branch
          gh pr merge develop --auto --squash --delete-branch
        shell: bash
